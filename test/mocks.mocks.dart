// Mocks generated by Mockito 5.4.6 from annotations
// in ecommerce/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i3;

import 'package:ecommerce/features/auth/data/auth_repository.dart' as _i2;
import 'package:ecommerce/features/catalog/data/catalog_repository.dart' as _i5;
import 'package:ecommerce/features/catalog/domain/product.dart' as _i6;
import 'package:firebase_auth/firebase_auth.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: deprecated_member_use
// ignore_for_file: deprecated_member_use_from_same_package
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: must_be_immutable
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class
// ignore_for_file: invalid_use_of_internal_member

/// A class which mocks [AuthRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockAuthRepository extends _i1.Mock implements _i2.AuthRepository {
  MockAuthRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Stream<_i4.User?> authStateChanges() =>
      (super.noSuchMethod(
            Invocation.method(#authStateChanges, []),
            returnValue: _i3.Stream<_i4.User?>.empty(),
          )
          as _i3.Stream<_i4.User?>);

  @override
  _i3.Future<void> signIn(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#signIn, [email, password]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> register(String? email, String? password) =>
      (super.noSuchMethod(
            Invocation.method(#register, [email, password]),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);

  @override
  _i3.Future<void> signOut() =>
      (super.noSuchMethod(
            Invocation.method(#signOut, []),
            returnValue: _i3.Future<void>.value(),
            returnValueForMissingStub: _i3.Future<void>.value(),
          )
          as _i3.Future<void>);
}

/// A class which mocks [CatalogRepository].
///
/// See the documentation for Mockito's code generation for more information.
class MockCatalogRepository extends _i1.Mock implements _i5.CatalogRepository {
  MockCatalogRepository() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Future<List<_i6.Product>> fetchProducts() =>
      (super.noSuchMethod(
            Invocation.method(#fetchProducts, []),
            returnValue: _i3.Future<List<_i6.Product>>.value(<_i6.Product>[]),
          )
          as _i3.Future<List<_i6.Product>>);

  @override
  _i3.Future<_i6.Product?> fetchProduct(String? id) =>
      (super.noSuchMethod(
            Invocation.method(#fetchProduct, [id]),
            returnValue: _i3.Future<_i6.Product?>.value(),
          )
          as _i3.Future<_i6.Product?>);
}
